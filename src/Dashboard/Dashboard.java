/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Dashboard;

import Crypto.Crypto;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import mailapp.MailApp;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.Authenticator;
import javax.mail.Flags;
import javax.mail.Folder;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.NoSuchProviderException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Store;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import mailapp.PGPEmail;


/**
 *
 * @author hoc
 */
public class Dashboard extends javax.swing.JFrame {

    /**
     * Creates new form Dashboard
     */
    
    Message[] messages;
    Folder folder;
    Store store;
    String User,Pass;

    public Dashboard() {
        initComponents();
        //setValueToModelTable();
    }
    
    public Dashboard(String user,String pass) throws NoSuchProviderException, MessagingException {
		this.User = user;
		this.Pass = pass;
        initComponents();
        this.setTitle(user);
         Properties props = System.getProperties();
        props.put("mail.imap.host", "imap.gmail.com");
        props.put("mail.store.protocol", "imap");
        props.put("mail.imap.port", "993");
        props.put("mail.imap.auth", "true");
        props.put("mail.imap.socketFactory.class", javax.net.ssl.SSLSocketFactory.class.getName());
        
        Session session = Session.getDefaultInstance(props, new Authenticator(){
            
            @Override
            protected PasswordAuthentication getPasswordAuthentication(){
                return new PasswordAuthentication(User,Pass);
            }
        });
        
        store = session.getStore();
        store.connect();
    }
    
    
 public void getMailWithIMAP() throws MessagingException{
     
     Object data[][];
       
        

            folder = store.getFolder("INBOX");
            folder.open(Folder.READ_WRITE);
            System.out.println("["+ folder.getFullName() +"]");
            messages = folder.getMessages();
            //DefaultTableModel model = new DefaultTableModel();
            int c =0;
            data = new Object[messages.length][3];
            for(Message msg : messages){
                
                String from = "";
                InternetAddress[] addresses = (InternetAddress[]) msg.getFrom();
                for(InternetAddress add : addresses){
                    from += add.getAddress();
                }
                
                
                data[c][0] = msg.getSubject();
                data[c][1] = from;
                data[c][2] = msg.getSentDate();
                c++;

            }
             TableModel dataModel = new DefaultTableModel(data,new Object[]{"Subject","From","Date"});
               jTable1.setModel(dataModel);
    }
 
 
    public void writePart(Message message) throws Exception {
        Multipart multiPart = (Multipart) message.getContent();

        for (int i = 0; i < multiPart.getCount(); i++) {
            MimeBodyPart part = (MimeBodyPart) multiPart.getBodyPart(i);

            if (part.isMimeType("text/plain")) {
                jTextArea1.setText((String) part.getContent() + "\n");
            } else {
                jCheckBox1.setSelected(true);
            }
        }
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        Derypt = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        Dowload = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Subject", "From", "Date"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Send Mail");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        jButton3.setText("Exit");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        Derypt.setText("Decrypt");
        Derypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeryptActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        Dowload.setText("Dowload");
        Dowload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DowloadActionPerformed(evt);
            }
        });

        jCheckBox1.setText("File");

        jButton2.setText("Get Messages");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 726, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Derypt, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBox1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40)
                                .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(Dowload)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox1)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton3)
                    .addComponent(Delete)
                    .addComponent(Derypt)
                    .addComponent(Dowload))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            // TODO add your handling code here:
            MailApp mail = new MailApp(User,Pass);
            //MailApp mail = new MailApp();
            folder.close(true);
            store.close();
            mail.setVisible(true);
            this.setVisible(false);
            
        } catch (MessagingException ex) {
            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        try {
            // TODO add your handling code here:
            int row = jTable1.getSelectedRow();
            messages[row].setFlag(Flags.Flag.DELETED,true);
            folder.expunge();
            getMailWithIMAP();
        } catch (MessagingException ex) {
            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_DeleteActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            // TODO add your handling code here:
            folder.close(true);
            store.close();
            System.exit(0);
        } catch (MessagingException ex) {
            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        try {
            // TODO add your handling code here:
            int row = jTable1.getSelectedRow();
            jTextArea1.setText("");
            jCheckBox1.setSelected(false);
            writePart(messages[row]);
        } catch (Exception ex) {
            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void DowloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DowloadActionPerformed
        try {
            // TODO add your handling code here:
            int row = jTable1.getSelectedRow();
            Multipart multiPart = (Multipart) messages[row].getContent();
            MimeBodyPart part = (MimeBodyPart) multiPart.getBodyPart(1);
            String destFilePath = "/home/hoc/Desktop/Dowload/" + part.getFileName();
            
            FileOutputStream output = new FileOutputStream(destFilePath);
 
            InputStream input = part.getInputStream();
            
            byte[] buffer = new byte[4096];
 
            int byteRead;

            while ((byteRead = input.read(buffer)) != -1) {
                output.write(buffer, 0, byteRead);
            }
            output.close();
            
            JOptionPane.showMessageDialog(this,"Dowload thành công !");
        } catch (IOException ex) {
            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MessagingException ex) {
            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_DowloadActionPerformed

    private void DeryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeryptActionPerformed
        try {
            // TODO add your handling code here:
            int row = jTable1.getSelectedRow();
            String from = "";
            InternetAddress[] addresses = (InternetAddress[]) messages[row].getFrom();
            for(InternetAddress add : addresses){
                from += add.getAddress();
            }
            String body = jTextArea1.getText();
            PGPEmail email = new PGPEmail();
            String plaintext = email.decryptContent(body, User,from)[0];
            
            jTextArea1.setText(plaintext);
            
            //decrypt file
            if(jCheckBox1.isSelected())
            {
            String keysec = email.decryptContent(body, User,from)[1];
            Multipart multiPart = (Multipart) messages[row].getContent();
            MimeBodyPart part = (MimeBodyPart) multiPart.getBodyPart(1);
            String destFilePath = "/home/hoc/Desktop/Dowload/" + part.getFileName();
            FileOutputStream output = new FileOutputStream(destFilePath);
 
            InputStream input = part.getInputStream();
            
            byte[] buffer = new byte[4096];
 
            int byteRead;

            while ((byteRead = input.read(buffer)) != -1) {
                output.write(buffer, 0, byteRead);
            }
            output.close();
            
            Crypto ce = new Crypto();
            ce.decryptFile(keysec, destFilePath);
            }
            
            
            if (email.Authentication(body, User, from))
                JOptionPane.showMessageDialog(this,"Chứng thực chữ kí thành công");
            else
                JOptionPane.showMessageDialog(this,"Chứng thực chữ kí thất bại");
            
            
                    } catch (MessagingException ex) {
            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_DeryptActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            // TODO add your handling code here:
            getMailWithIMAP();
        } catch (MessagingException ex) {
            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                    new Dashboard().setVisible(true);
                 
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Delete;
    private javax.swing.JButton Derypt;
    private javax.swing.JButton Dowload;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
